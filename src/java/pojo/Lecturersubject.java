package pojo;

import dao.DAOLecturer;
import dao.DAOLecturerSubject;
import dao.DAOStudentSubject;
import dao.DAOSubject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

/**
 * Lecturersubject generated by hbm2java
 */
@ManagedBean
public class Lecturersubject implements java.io.Serializable {

    private Integer id; // Ganti dengan tipe data yang sesuai untuk ID
    private Lecturer lecturer;
    private Subject subject;
    private String tahunAjaran;
    private String printOnXhtml;
    private Integer idLecturer; // Menambahkan properti idLecturer
    private Integer idSubject; // Menambahkan properti idSubject
    

    public Lecturersubject() {
        lecturer = new Lecturer();
        subject = new Subject();
    }

    public Lecturersubject(Lecturer lecturer, Subject subject, String tahunAjaran) {
        this.lecturer = lecturer;
        this.subject = subject;
        this.tahunAjaran = tahunAjaran;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Lecturer getLecturer() {
        return this.lecturer;
    }

    public void setLecturer(Lecturer lecturer) {
        this.lecturer = lecturer;
    }

    public Subject getSubject() {
        return this.subject;
    }

    public void setSubject(Subject subject) {
        this.subject = subject;
    }

    public String getTahunAjaran() {
        return this.tahunAjaran;
    }

    public void setTahunAjaran(String tahunAjaran) {
        this.tahunAjaran = tahunAjaran;
    }

    public String getPrintOnXhtml() {
        return printOnXhtml;
    }

    public void setPrintOnXhtml(String printOnXhtml) {
        this.printOnXhtml = printOnXhtml;
    }

    public Integer getIdLecturer() {
        return this.idLecturer;
    }

    public void setIdLecturer(Integer idLecturer) {
        this.idLecturer = idLecturer;
    }

    // Getter dan Setter untuk idSubject
    public Integer getIdSubject() {
        return this.idSubject;
    }

    public void setIdSubject(Integer idSubject) {
        this.idSubject = idSubject;
    }

    public String getSubjectName() {
        return this.subject.getSubjectName();
    }

    public String getLecturerNames() {
        List<Lecturer> lecturers = new ArrayList<>(this.subject.getLecturersubjects());
        StringBuilder lecturerNames = new StringBuilder();
        for (Lecturer lecturer : lecturers) {
            if (lecturerNames.length() > 0) {
                lecturerNames.append(", ");
            }
            lecturerNames.append(lecturer.getName());
        }
        return lecturerNames.toString();
    }

    public Integer getScheduleId() {
        return this.subject.getSchedule().getIdSchedule();
    }

    public String getScheduleStartTime() {
        return this.subject.getSchedule().getStartTime();
    }

    public String getScheduleDueTime() {
        return this.subject.getSchedule().getDueTime();
    }

    public List<SelectItem> getAllLecturers() {
        List<SelectItem> items = new ArrayList<>();
        DAOLecturer lecturerDao = new DAOLecturer();
        List<Lecturer> lecturers = lecturerDao.retrieveLecturers();
        for (Lecturer lecturer : lecturers) {
            items.add(new SelectItem(lecturer.getIdLecturer(), lecturer.getName()));
        }
        return items;
    }

    public List<SelectItem> getAllSubjects() {
        List<SelectItem> items = new ArrayList<>();
        DAOSubject subjectDao = new DAOSubject();
        List<Subject> subjects = subjectDao.retrieveAllSubjects();
        for (Subject subject : subjects) {
            // Mengambil properti dari Subject
            Integer subjectId = subject.getIdSubject();
            String subjectName = subject.getSubjectName();

            // Mengambil properti dari Schedule
            Integer scheduleId = subject.getSchedule().getIdSchedule();
            String scheduleStartDate = subject.getSchedule().getStartDate();
            String scheduleDueDate = subject.getSchedule().getDueDate();
            String scheduleStartTime = subject.getSchedule().getStartTime();
            String scheduleDueTime = subject.getSchedule().getDueTime();

            // Menambahkan SelectItem dengan informasi yang diambil
            String label = subjectName + " - Start Time: " + scheduleStartTime + " - Due Time: " + scheduleDueTime;
            String value = subjectId.toString(); // Menggunakan ID sebagai nilai
            items.add(new SelectItem(value, label));
        }
        return items;
    }

    public void save() {
        DAOLecturerSubject dao = new DAOLecturerSubject();
        dao.addLecturerSubject(this);
        printOnXhtml = "Success";
    }

    public void delete() {
        DAOLecturerSubject dao = new DAOLecturerSubject();
        dao.deleteLecturerSubject(this.id);
        printOnXhtml = "Success";
    }

    public List<Lecturersubject> getbyid() {
        DAOLecturerSubject dao = new DAOLecturerSubject();
        List<Lecturersubject> lecturersubjects = (List<Lecturersubject>) dao.getLecturerSubjectById(this.id);
        return lecturersubjects;
    }

    public List<Lecturersubject> getallrecords() {
        DAOLecturerSubject dao = new DAOLecturerSubject();
        List<Lecturersubject> lecturersubjects = dao.retrieveLecturerSubjects();
        return lecturersubjects;
    }

    public void update() {
        DAOLecturerSubject dao = new DAOLecturerSubject();
        dao.updateLecturerSubject(this);
        printOnXhtml = "Success";
    }

    public void getById() {
    DAOLecturerSubject dao = new DAOLecturerSubject();
    Lecturersubject lecturerSubject = dao.getLecturerSubjectById(this.id);
    if (lecturerSubject != null) {
        lecturer = lecturerSubject.getLecturer();
        subject = lecturerSubject.getSubject();
        tahunAjaran = lecturerSubject.getTahunAjaran();
        idLecturer = lecturer != null ? lecturer.getIdLecturer() : null;
        idSubject = subject != null ? subject.getIdSubject() : null; // Perhatikan perubahan di sini
    }
}


public List<Lecturersubject> getAllSubjectsForLoggedInLecturer() {
    List<Lecturersubject> subjectsForLoggedInLecturer = new ArrayList<>(); // Create a list to store the subjects

    // Get the logged-in lecturer's ID from the session
    Integer loggedInLecturerId = (Integer) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("loggedInLecturerId");

    if (loggedInLecturerId != null) {
        // Fetch the list of lecturer subjects for the logged-in lecturer
        DAOLecturerSubject daoLecturerSubject = new DAOLecturerSubject();
        List<Lecturersubject> lecturerSubjects = daoLecturerSubject.getLecturerSubjectsByLecturerId(loggedInLecturerId);

        subjectsForLoggedInLecturer.addAll(lecturerSubjects); // Add the lecturer subjects to the list
    }

    return subjectsForLoggedInLecturer;
}



}
