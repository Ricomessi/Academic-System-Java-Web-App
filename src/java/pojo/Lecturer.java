package pojo;

import dao.DAOLecturer;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;

/**
 * Lecturer generated by hbm2java
 */
@ManagedBean
public class Lecturer implements java.io.Serializable {

    private Integer idLecturer;
    private String name;
    private String email;
    private String password;
    private String nameMessage;
    private Set lecturersubjects = new HashSet(0);

    public Lecturer() {
    }
    
    public Lecturer(String name, String email, String password, Set lecturersubjects) {
        this.name = name;
        this.email = email;
        this.password = password;
        this.lecturersubjects = lecturersubjects;
    }

    public Integer getIdLecturer() {
        return this.idLecturer;
    }

    public void setIdLecturer(Integer idLecturer) {
        this.idLecturer = idLecturer;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Set getLecturersubjects() {
        return this.lecturersubjects;
    }

    public void setLecturersubjects(Set lecturersubjects) {
        this.lecturersubjects = lecturersubjects;
    }
    
   

    
    public String getNameMessage() {
    return nameMessage;
}

public void setNameMessage(String nameMessage) {
    this.nameMessage = nameMessage;
}
    
    public void save() {
    DAOLecturer ldao = new DAOLecturer();
    
    // Periksa apakah email sudah ada di database
    Lecturer existingLecturer = ldao.getLecturerByEmail(email);
    if (existingLecturer != null) {
        // Email sudah ada di database, berikan pesan kesalahan
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Email sudah digunakan. Silakan pilih email lain."));
    } else {
        // Email belum ada di database, lakukan penyimpanan
        ldao.addLecturer(this);
        
    }
}

    public List<Lecturer> getAllLecturers() {
    DAOLecturer lecturerDao = new DAOLecturer(); // Ganti dengan DAO Lecturer yang sesuai
    try {
        // Implementasi logika untuk mendapatkan semua pengajar
        // Contoh:
        return lecturerDao.retrieveLecturers();
    } catch (Exception e) {
        e.printStackTrace();
        // Tangani pengecualian jika diperlukan, misalnya, tampilkan pesan kesalahan
        return new ArrayList<>();
    }
}


    public void delete() {
        DAOLecturer ldao = new DAOLecturer();
        ldao.deleteLecturer(idLecturer);
    }

    public void getById() {
        DAOLecturer ldao = new DAOLecturer();
        Lecturer lecturer = ldao.getLecturerById(idLecturer);
        if (lecturer != null) {
            name = lecturer.getName();
            email = lecturer.getEmail();
            password = lecturer.getPassword();
        }
    }

     public List<Lecturer> getAllRecords() {
        DAOLecturer ldao = new DAOLecturer();
        return ldao.retrieveLecturers();
    }
     
    public void update() {
        DAOLecturer ldao = new DAOLecturer();
        ldao.updateLecturer(this);
    }
    
    
    
   public String login() {
    try {
        if (email == null || email.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Email and password must be filled in."));
            return "loginerror"; // Redirect to the login error page
        }

        DAOLecturer ldao = new DAOLecturer();
        List<Lecturer> lecturerList = ldao.login(email, password);
        FacesContext context = FacesContext.getCurrentInstance();

        if (lecturerList != null && !lecturerList.isEmpty()) {
            Lecturer loggedInLecturer = lecturerList.get(0);

            // Store the loggedInLecturer in the session
            context.getExternalContext().getSessionMap().put("email", email);

            int idLecturer = loggedInLecturer.getIdLecturer();

            // Fetch the idSubject for the lecturer
            int idSubject = ldao.getIdSubjectForLecturer(idLecturer);

            // Store the idSubject in the session
            context.getExternalContext().getSessionMap().put("loggedInLecturerSubject", idSubject);

            // Fetch the idSchedule for the subject
            int idSchedule = ldao.getIdScheduleForSubject(idSubject);

            // Store the idSchedule in the session
            context.getExternalContext().getSessionMap().put("loggedInLecturerSchedule", idSchedule);

            return "loginsuccess"; // Redirect to the loginsuccess.xhtml page
        } else {
            context.addMessage(null, new FacesMessage("Login failed. Please check your email and password."));
            return "loginerror"; // Redirect to the login error page
        }
    } catch (Exception e) {
        // Handle the exception, log it, and provide a user-friendly message
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, new FacesMessage("An error occurred during login. Please try again later."));
        return null; // Redirect to the login error page
    }
}




    public void validateName() {
    if (name != null && !name.matches("^[A-Za-z ]+$")) {
        nameMessage = "Nama hanya boleh mengandung huruf dan spasi.";
    } else {
        nameMessage = "";
    }
}

    
    public String logout() {
        // Invalidate the user's session
        FacesContext.getCurrentInstance().getExternalContext().invalidateSession();
        
        
        return "index"; 
    }
}
