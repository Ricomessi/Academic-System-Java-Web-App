    package pojo;
    // Generated Oct 6, 2023 2:09:22 PM by Hibernate Tools 4.3.1


    import dao.DAOCourse;
    import java.util.ArrayList;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;
    import javax.faces.bean.ManagedBean;

    /**
     * Course generated by hbm2java
     */
    @ManagedBean
    public class Course  implements java.io.Serializable {


         private Integer idClass;
         private String className;
         private Set students = new HashSet(0);
         private Set schedules = new HashSet(0);
         private String printOnXhtml;

        public Course() {
        }

        public Course(String className, Set students, Set schedules) {
           this.className = className;
           this.students = students;
           this.schedules = schedules;
        }

        public Integer getIdClass() {
            return this.idClass;
        }

        public void setIdClass(Integer idClass) {
            this.idClass = idClass;
        }
        public String getClassName() {
            return this.className;
        }

        public void setClassName(String className) {
            this.className = className;
        }
        public Set getStudents() {
            return this.students;
        }

        public void setStudents(Set students) {
            this.students = students;
        }
        public Set getSchedules() {
            return this.schedules;
        }

        public void setSchedules(Set schedules) {
            this.schedules = schedules;
        }

        public String getPrintOnXhtml() {
            return printOnXhtml;
        }

        public void setPrintOnXhtml(String printOnXhtml) {
            this.printOnXhtml = printOnXhtml;
        }

        public void saveCourse() {
        DAOCourse courseDao = new DAOCourse(); // Ganti dengan DAO Course yang sesuai
        try {
            // Implementasi logika untuk menyimpan kelas (Course)
            // Contoh:
            courseDao.addCourse(this);
            printOnXhtml = "Success";
        } catch (Exception e) {
            e.printStackTrace();
            // Tangani pengecualian jika diperlukan, misalnya, tampilkan pesan kesalahan
        }
    }

    public void deleteCourse() {
        DAOCourse courseDao = new DAOCourse(); // Ganti dengan DAO Course yang sesuai
        try {
            // Implementasi logika untuk menghapus kelas (Course)
            // Contoh:
            courseDao.deleteCourse(idClass);
            printOnXhtml = "Success";
        } catch (Exception e) {
            e.printStackTrace();
            // Tangani pengecualian jika diperlukan, misalnya, tampilkan pesan kesalahan
        }
    }



    public List<Course> getCourseById() {
        DAOCourse courseDao = new DAOCourse(); // Ganti dengan DAO Course yang sesuai
        try {
            // Implementasi logika untuk mendapatkan kelas berdasarkan ID
            // Contoh:
            return courseDao.getCourseById(idClass);
        } catch (Exception e) {
            e.printStackTrace();
            // Tangani pengecualian jika diperlukan, misalnya, tampilkan pesan kesalahan
            return new ArrayList<>();
        }
    }

    public List<Course> getAllCourses() {
        DAOCourse courseDao = new DAOCourse(); // Ganti dengan DAO Course yang sesuai
        try {
            
            return courseDao.retrieveAllCourses();
        } catch (Exception e) {
            e.printStackTrace();
        
            return new ArrayList<>();
        }
    }

    public void updateCourse() {
        DAOCourse courseDao = new DAOCourse(); // Ganti dengan DAO Course yang sesuai
        try {
            // Implementasi logika untuk memperbarui kelas (Course)
            // Contoh:
            courseDao.updateCourse(this);
            printOnXhtml = "Success";
        } catch (Exception e) {
            e.printStackTrace();
            // Tangani pengecualian jika diperlukan, misalnya, tampilkan pesan kesalahan
        }
    }

      public void getById() {
        DAOCourse cdao = new DAOCourse();
        try {
            // Implementasi logika untuk mendapatkan kursus berdasarkan ID
            // Misalnya:
            List<Course> courses = cdao.getCourseById(idClass);
            if (!courses.isEmpty()) {
                Course course = courses.get(0); // Mengambil kursus pertama dari daftar (asumsi hanya satu kursus dengan ID yang diberikan)
                // Set properti-propertri yang sesuai dari kursus ke properti-properti Course
                // Pastikan Anda memiliki properti yang sesuai di dalam kelas Course
                // Contoh:
                setIdClass(course.getIdClass());
                setClassName(course.getClassName());
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Tangani pengecualian jika diperlukan, misalnya, tampilkan pesan kesalahan
        }
    }


public List<Course> getAllRecords() {
        DAOCourse sdao = new DAOCourse();
        return sdao.retrieveAllCourses();
    }



    }


