package pojo;

import dao.DAOSchedule;
import dao.DAOCourse;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.bean.ManagedBean;
import javax.faces.model.SelectItem;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

/**
 * Schedule generated by hbm2java
 */
@ManagedBean
public class Schedule implements java.io.Serializable {

    private Integer idSchedule;
    private Integer idClass;
    private Course course;
    private String dueTime;
    private String startTime;
    private Set subjects = new HashSet(0);

    public Schedule() {
        course = new Course();
    }

    public Schedule(Course course, String dueTime, String startTime, Set<Subject> subjects) {
        this.course = course;
        this.dueTime = dueTime;
        this.startTime = startTime;
        this.subjects = subjects;
    }
    
    public Integer getIdClass() {
    return this.idClass;
}

public void setIdClass(Integer idClass) {
    this.idClass = idClass;
}

    public Integer getIdSchedule() {
        return this.idSchedule;
    }

    public void setIdSchedule(Integer idSchedule) {
        this.idSchedule = idSchedule;
    }

    public Course getCourse() {
        return this.course;
    }

    public void setCourse(Course course) {
        this.course = course;
    }

    public String getDueTime() {
        return this.dueTime;
    }

    public void setDueTime(String dueTime) {
        this.dueTime = dueTime;
    }

    public String getStartTime() {
        return this.startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    public Set getSubjects() {
        return this.subjects;
    }

    public void setSubjects(Set subjects) {
        this.subjects = subjects;
    }

    public void save() {
    DAOSchedule scheduleDao = new DAOSchedule();

    try {
        // Implement your save logic here
        // Example:
        scheduleDao.addSchedule(this);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Schedule saved successfully."));
    } catch (Exception e) {
        e.printStackTrace();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("An error occurred while saving data."));
    }
}

    public void delete() {
        DAOSchedule scheduleDao = new DAOSchedule();
        scheduleDao.deleteSchedule(idSchedule);
    }

   public void getById() {
    DAOSchedule scheduleDao = new DAOSchedule();
    Schedule schedule = scheduleDao.getScheduleByID(idSchedule);
    if (schedule != null) {
        // Di sini, Anda dapat mengatur atribut-atribut dari objek Schedule Anda
        dueTime = schedule.getDueTime();
        startTime = schedule.getStartTime();
    }
}


     public List<Schedule> getAllRecords() {
        DAOSchedule sdao = new DAOSchedule();
        return sdao.retrieveAllSchedules();
    }

    public void update() {
        DAOSchedule scheduleDao = new DAOSchedule();
        scheduleDao.updateSchedule(this);
    }

   public List<SelectItem> getAllCourses() {
    List<SelectItem> items = new ArrayList<>();
    DAOCourse courseDao = new DAOCourse();
    List<Course> courses = courseDao.retrieveAllCourses();
    for (Course course : courses) {
        items.add(new SelectItem(course.getIdClass(), course.getClassName()));
    }
    return items;
}

   public List<Schedule> getAllSchedules() {
        DAOSchedule scheduleDao = new DAOSchedule();
        try {
            // Panggil metode getAllSchedules dari DAO Schedule
            return scheduleDao.getAllSchedules();
        } catch (Exception e) {
            e.printStackTrace();
            // Handle exceptions, e.g., display an error message
            return null;
        }
    }
    
    // Add any additional methods or logic for the Schedule class here

    public String getStartDate() {
        // Mengambil tanggal awal dari objek Schedule (pastikan ada atribut untuk tanggal awal)
        return this.startTime; // Gantilah 'this.startDate' dengan atribut yang sesuai
    }

    public void setStartDate(String startDate) {
        // Set tanggal awal untuk objek Schedule
        this.startTime = startDate; // Gantilah 'this.startDate' dengan atribut yang sesuai
    }

    public String getDueDate() {
        // Mengambil tanggal akhir dari objek Schedule (pastikan ada atribut untuk tanggal akhir)
        return this.dueTime; // Gantilah 'this.dueDate' dengan atribut yang sesuai
    }

    public void setDueDate(String dueDate) {
        // Set tanggal akhir untuk objek Schedule
        this.dueTime = dueDate; // Gantilah 'this.dueDate' dengan atribut yang sesuai
    }
    
    public String getCourseNameByScheduleId(Integer scheduleId) {
    DAOSchedule scheduleDao = new DAOSchedule();
    String courseName = scheduleDao.getCourseNameByScheduleId(scheduleId);
    return courseName != null ? courseName : "Course Not Found";
}
    
    public List<Schedule> getAllSchedulesForLoggedInStudent() {
    // Dapatkan idStudentSubject dari sesi login mahasiswa
    int idSchedule = (int) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("loggedInStudentSubject");

    DAOSchedule scheduleDao = new DAOSchedule(); // Gantilah dengan DAO Schedule yang sesuai
    List<Schedule> allSchedules = scheduleDao.retrieveAllSchedules();

    List<Schedule> schedulesForLoggedInStudent = new ArrayList<>();

    // Filter jadwal sesuai dengan idStudentSubject
    for (Schedule schedule : allSchedules) {
        if (schedule.getIdSchedule() == idSchedule) {
            schedulesForLoggedInStudent.add(schedule);
        }
    }

    return schedulesForLoggedInStudent;
}
}

